extends index

block api-guide

	include __navbar.pug

	.api-guide-container

		//- img(src="/assets/images/parcelized-agc-data-struc.png" alt="alt")

		br
		h2 Using the Farmland Parcelization API
		//- p.last-update Updated 27 September 2020
		p.last-update Updated 11 December 2020
		br

		.credentials-container
			div.token-subtitle Public API Key 
			br
			div.token-code ADSS=23232AD=ASDIO293-MLK23290-23AD.235DS554S5_4409IODSO

		br
		h3 Retreive A Single Parcelized AGC
		p The code snippet below shows how to retreive parcelized AGC data from the database using an asynchronous Fetch API GET request. It is implemented in ES6/ES2017 JavaScript, and uses object-oriented programming concepts. By passing the "agc_id" as an argument, it returns a single parcelized AGC from the database in a promise. 

		pre.embedded-code-snippet
			code.language-javascript.
				// Set up the API call function
				async function getParcelizedAgc(agcID) {
					try {
						const apiResponse = await fetch(`https://agcfarmlands.herokuapp.com/api/v1/parcelized-agcs/parcelized-agc/?${agcID}`);
						const data = await apiResponse.json();
						return data;
					} 
					catch (error) {
						console.error(error.message);
					};
				};

				// Execute the API call
				getParcelizedAgc('unique-agc-id-6880561')
					.then(function(data) {
						console.log(JSON.stringify(data));
						}
					);

		br
		h3 Retreive All the Parcelzied AGCs
		br

		pre.embedded-code-snippet
			code.language-javascript.
				// Set up the API call function
				async function getAllParcelizedAgcs() {
					try {
						const apiResponse = await fetch(`https://agcfarmlands.herokuapp.com/api/v1/parcelized-agcs/`);
						const data = await apiResponse.json();
						return data;
					} 
					catch (error) {
						console.error(error.message);
					};
				};

				// Execute the API call
				getAllParcelizedAgcs()
					.then(function(data) {
						console.log(JSON.stringify(data));
						}
					);

		br
		h3 Render the Parcelized Plots Preview Map
			span New!

		p Each subsequent parcelized AGC payload retreived from the endpoint will now contain a secret string hash. Get that string by reading the #[strong "properties.preview_map_url_hash"] field. Here's a sample JSON snippet from an API call to the parcelized AGCs endpoint-

		pre.embedded-code-snippet
			code.language-javascript.
				{
					"status": "success",
					"data": {
						"parcelizedAgcData": {
							"properties": {
								"agc_id": "AGCABI000010",
								"agc_extended_name": "Agc Nosa 7",
								"agc_location": "ABA,Aba South,Abia",
								"num_farmers": 10,
								"agc_area": 50.6404559187225,
								"total_allocation": 45,
								"unused_land_area": 4.417271065696374,
								"preview_map_url_hash": "XAWXEACGEBVLGDRACUGOZYBSZTCKHMMDHOYVAPRWKXRNJVWXHXZHUMXTYTILBBMY"
							},
							"type": "FeatureCollection",
							"_id": "5fce88c3071dac0c0c924f7d",
							"features": [ ... ]
						}
					}
				}

		p Construct the preview map url using the hash string like so-
		//- .credentials-container
		pre.embedded-code-snippet
			code.language-javascript.
				// `https://agcfarmlands.herokuapp.com/parcelized-agc/?${preview_map_url_hash}`

				https://agcfarmlands.herokuapp.com/parcelized-agc/?XAWXEACGEBVLGDRACUGOZYBSZTCKHMMDHOYVAPRWKXRNJVWXHXZHUMXTYTILBBMY

		p.important-note Note that all the previous, public preview map URLs that contained the AGC IDs are now decommissioned, and will therefore not work any longer. All the test AGCs that have been parcelized so far will not have working preview map URLs anymore.

		br
		h3 Sending AGC data to the DB (using the Fetch API)
		p The snippet below shows how to persist AGC JSON data (using the GEOJSON standard) to the database using an asynchronous Fetch API POST request.

		pre
			//- .devsite-code-buttons-container
			//- 	button.gc-analytics-event.material-icons.devsite-icon-code-dark.devsite-toggle-dark(type='button' data-category='Site-Wide Custom Events' data-label='Dark Code Toggle' track-type='exampleCode' track-name='darkCodeToggle' aria-label='Dark code theme' data-title='Dark code theme')
			//- 	button.gc-analytics-event.material-icons.devsite-icon-code-light.devsite-toggle-light(type='button' data-category='Site-Wide Custom Events' data-label='Light Code Toggle' track-type='exampleCode' track-name='lightCodeToggle' aria-label='Light code theme' data-title='Light code theme')
			//- 	button.gc-analytics-event.material-icons.devsite-icon-copy(type='button' data-category='Site-Wide Custom Events' data-label='Click To Copy' track-type='exampleCode' track-name='clickToCopy' aria-label='Copy code sample to clipboard' data-title='Copy code sample to clipboard')

			include _fetch-request-snippet
			br

		br
		h3 Sending AGC data to the Database (using an XML HTTP Request)
		p The snippet below shows an alternate method to persist AGC JSON data to the database using XMLHttpRequest().

		pre
			include _xml-request-snippet
			br


		br
		h3 Sample AGC JSON Data Structure
		p Each AGC payload is a GEOJSON #[em #[strong FeatureCollection]], that contains just ONE #[em Feature].
		//- div IMPORTANT
		p.important-note The DB insertion will fail if the 'agc_id', 'extended_name', 'location', and/or 'farmers' fields are missing from the JSON payload, or if an AGC with the same 'agc_id', 'extended_name', and/or coordinates already exists in the database. Those first 4 fields in 'properties' are REQUIRED.
		p.important-note The total hectares allocated to the farmers must not exceed the AGC land area.
		pre.agc-json-data-ex
			include _agc-json-data-example